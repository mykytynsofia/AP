openapi: 3.0.0
info:
  title: Booking API
  description: Service for reserving audience
  version: 1.7.1
servers:
  - url: http://api.booking.com/v7
    description: ''
tags:
  - name: booking
    description: Everything for booking class
    externalDocs:
      url: http://docs.my-api.com/pet-operations.htm
  - name: user
    description: Everything about  user
    externalDocs:
      url: http://docs.my-api.com/pet-operations.htm
  - name: class
    description: Everythingabout classes
    externalDocs:
      url: http://docs.my-api.com/pet-operations.htm
paths:
  /auth/login:
    get:
      tags:
        - user
      summary: Logs user in
      description: provides logging into system with given credentials
      operationId: loginUser
      parameters:
        - name: id
          in: query
          description: The username
          required: true
          schema:
            type: integer
        - name: authorization
          in: query
          description: the user's password
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '401':
          description: Authentication information is missing or invalid
      security:
        - basicAuth: []
  /auth/logout:
    get:
      tags:
        - user
      summary: Logs  user out
      operationId: logoutUser
      responses:
        '200':
          description: successful operation
        '401':
          description: Authentication information is missing or invalid
      security:
        - basicAuth: []
  /class:



    get:
      tags:
      - class
      summary: Return a list of all classes
      description: Optional extended description in CommonMark or HTML.
      operationId: getbook
      parameters:
        - in: query
          name: date
          required: false
          schema:
            type: string
            format: date-time
            minimum: 1
        - in: query
          name: class
          required: false
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: "successful operation. Return list of all classes"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/class'
        '400':
          description: there is not cllass
        '404':
          description: unnow that date
    post:
      tags:
      - class
      summary: Create class
      operationId: addclass
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/class'
        required: true
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/class'
        '409':
          description: already create
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/class'
        '404':
          description: faild
      security:
        - basicAuth: []


  /class/{classid}:


    get:
      tags:
      - class
      summary: Get class by id
      description: Get information about class with provided ID
      operationId: getClassById
      parameters:
      - name: classid
        in: path
        required: true
        description: 'The class id that needs to be returned.'
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/class'

        404:
          description: A user with provided ID was not found.
      security:
      - basicAuth: []

    delete:
      tags:
      - class
      summary: Delete class
      description: deleting existing rating owned by current user
      operationId: deleteRating
      parameters:
      - name: classid
        in: path
        required: true
        description: 'rating id that needs to be updated'
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Success
        '400':
          description: Invalid id supplied
        '404':
          description: error authorization
      security:
        - basicAuth: []
    put:
      tags:
      - class
      summary: Update class
      operationId: updateclass
      parameters:
        - in: path
          name: classid
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: address

          schema:
            type: string

            minimum: 1
        - in: query
          name: name

          schema:
            type: string


      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/book'
        '400':
          description: there is no such ID

        '406':
          description: no properties
      security:
        - basicAuth: []

  /user:


    get:
      tags:
      - user
      summary: Return a list of all users
      description: Optional extended description in CommonMark or HTML.
      operationId: getusers
      parameters:
        - in: query
          name: date
          required: false
          schema:
            type: string
            format: date-time
            minimum: 1
        - in: query
          name: class
          required: false
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: "successful operation. Return list of all users"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/class'
        '400':
          description: there is not users
        '404':
          description: unnow that date
      security:
        - basicAuth: []


    post:
      tags:
      - user
      summary: Create user
      operationId: adduser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/book'
        required: true
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/book'
        '409':
          description: already create
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/book'
        '406':
          description: no properties
      security:
        - basicAuth: []



  /user/{id}:

    get:
      tags:
      - user
      summary: Get user by id
      description: Get information about user with provided ID
      operationId: getUserById
      parameters:
      - name: id
        in: path
        required: true
        description: 'The user id that needs to be returned.'
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

        404:
          description: A user with provided ID was not found.
      security:
      - basicAuth: []
    put:
      tags:
      - user
      summary: Update user
      operationId: update
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: Firstname

          schema:
            type: string

            minimum: 1
        - in: query
          name: Lastname

          schema:
            type: string
        - in: query
          name: properties

          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 120

        - name: authorization
          in: query

          schema:
            type: integer
            format: int64

      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

        '409':
          description: already create
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '406':
          description: no properties authorization
      security:
        - basicAuth: []
    delete:
      tags:
      - user
      summary: Deletes a user
      operationId: deleteuser
      parameters:
      - name: id
        in: path
        required: true
        description: 'id user delete '
        schema:
          type: integer
          format: int64
      - name: authorization
        in: query
        required: true
        description: 'id user who make booking'
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: Success
        '400':
          description: Invalid id supplied
        '404':
          description: error authorization
      security:
        - basicAuth: []



  /booking:
    get:
      tags:
      - booking
      summary: Returns a list of bookings.
      description: Optional extended description in CommonMark or HTML.
      operationId: getbookings
      parameters:
        - in: query
          name: date
          required: false
          schema:
            type: string
            format: date-time
            minimum: 1
        - in: query
          name: class
          required: false
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/book'
        '400':
          description: there is not cllass
        '404':
          description: unnow that date
    post:
      tags:
      - booking
      summary: Create booking
      operationId: addbook
      parameters:
      - name: userid
        in: query
        required: true
        description: 'id of the user who makes a booking'
        schema:
          type: integer
          format: int64
      - name: authorization
        in: query
        required: true

        schema:
          type: integer
          format: int64
      requestBody:
        description: 'rating object updated'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/book'
        required: true
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/book'
        '400':
          description: there is no such class
        '409':
          description: already booked
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/book'
        '406':
          description: no properties
      security:
        - basicAuth: []
  /booking/{id}:

    get:
      tags:
      - booking
      summary: Get booking by id
      description: Get information about booking with provided ID
      operationId: getBookingById
      parameters:
      - name: id
        in: path
        required: true
        description: 'The booking id that needs to be returned.'
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/book'

        404:
          description: A user with provided ID was not found.
      security:
      - basicAuth: []
    put:
      tags:
      - booking
      summary: Update booking
      operationId: updatebooking
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: class

          schema:
            type: integer
            format: int64
            minimum: 1
        - in: query
          name: date

          schema:
            type: integer
            format: int64
            minimum: 1
        - in: query
          name: hours

          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 120
        - in: query
          name: user id
          description: 'id user who make booking'
          required: true
          schema:
            type: integer
            format: int64
        - name: authorization
          in: query
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/book'
        '400':
          description: there is no such ID
        '409':
          description: time or room is already busy
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/book'
        '406':
          description: no properties
      security:
        - basicAuth: []
    delete:
      tags:
      - booking
      summary: Delete  booking
      operationId: deletePet
      parameters:
      - name: id
        in: path
        required: true
        description: 'id user who make booking'
        schema:
          type: integer
          format: int64
      - name: authorization
        in: query
        required: true
        description: 'id user who make booking'
        schema:
          type: integer
          format: int64
      - name: ID
        in: query
        required: true
        schema:
          type: integer
          format: int64
          minimum: 1
      responses:
        '200':
          description: Success
        '400':
          description: Invalid ID supplied
        '404':
          description: class ID not found
      security:
        - basicAuth: []

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 0
        Firstname:
          type: string
          example: Arthur
        Lastname:
          type: string
          example: Dent
        properties:
          type: string
          example: ALL

        authorization:
          type: string
          example: '1111'
      required:
        - id
        - Firstname
        - Lastname
         -properties
        - authorization

    book:
      type: object
      properties:
        id:
          type: integer
          format: int64
        classId:
          type: integer
          format: int64
        StartDateTime:
          type: string
          format: date-time
        ENDDateTime:
          type: string
          format: date-time
        iduser:
          type: integer
          format: int64
      required:
        - id
        - classId
        - StartDateTime
        - ENDDateTime
        - iduser
      xml:
        name: book

    class:
      type: object
      properties:
        id:
          type: integer
          format: int64
        addres:
          type: string
        name:
          type: string
        class_user:
          type: integer
          format: int64
      required:
        - id
        - class_user
      xml:
        name: class
  securitySchemes:

    basicAuth:
      type: http
      scheme: basic
